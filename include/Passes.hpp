/* This code and any associated documentation is provided "as is"

Copyright 2024 Munich Quantum Software Stack Project

Licensed under the Apache License, Version 2.0 with LLVM Exceptions (the
"License"); you may not use this file except in compliance with the License.
You may obtain a copy of the License at

TODO: URL LICENSE

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations under
the License.

SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
*************************************************************************
  author Martin Letras
  date   December 2024
  version 1.0
*************************************************************************/
  /** @file
   * @brief
   * @details Header file that defines the signature for each QUAKE MLIR defined into the
   * Munich Quantum Software Stack (MQSS).
   *
   * @par
   * This header must be included to use the collection of passes that are part of the MQSS.
   */

#ifndef PASSES_H
#define PASSES_H

#pragma once

#include <stdexcept>
#include "mlir/Pass/Pass.h"
#include "mlir/Pass/PassManager.h"
#include "mlir/Pass/PassRegistry.h"
#include "llvm/Support/raw_ostream.h"
#include "qdmi.h"
#include "sc/heuristic/HeuristicMapper.hpp"

/**
 * @def CUDAQ_PREFIX_FUNCTION
 * @brief Macro defining the prefix of each quantum kernel generated by QUAKE MLIR. This macro is used to identify QUAKE MLIR quantum kernels.
 */
#define CUDAQ_PREFIX_FUNCTION "__nvqpp__mlirgen__"

namespace mqss::opt{

/**
 * @brief Example custom MLIR pass.
   @details This method constructs an mlir::Pass of the type CustomExamplePass. This pass operates on any given QUAKE MLIR module and replaces all Hadamard gates into a quantum circuit by S gates.

  \image html docs/_static/mqss-passes/CustomExamplePass.png width=60%

   @return An `mlir::Pass` object containing the definition of the CustomExamplePass. This `mlir::Pass` object has to be passed to an `mlir::PassManager` to transform any given MLIR module.
 */
std::unique_ptr<mlir::Pass> createCustomExamplePass();

/**
 * @brief Example MLIR pass that traverses a given QUAKE MLIR.
   @details This method constructs an `mlir::Pass` of the type PrintQuakeGatesPas. This pass operates on any QUAKE MLIR module and visit each operation dumping its name and type into the parameter `ostream`.
   @param[out] ostream A raw stream object that stores information about any given MLIR module.
   @return An `mlir::Pass` object containing the definition of the PrintQuakeGatesPas. This `mlir::Pass` object has to be passed to an `mlir::PassManager` to take effect on any given MLIR module.
 */
std::unique_ptr<mlir::Pass> createPrintQuakeGatesPass(llvm::raw_string_ostream &ostream);
/**
 * @brief QUAKE MLIR pass to perform the mapping of quantum circuits to superconducting devices using the MQT-QMAP.
   @details This method constructs an `mlir::Pass` of the type QuakeQMapPass. This pass operates on any QUAKE MLIR module and performs the mapping of any given quantum circuit to an specific quantum superconducting device.
  @param[out] architecture is the selected superconducting quantum device configuration, including important information for mapping, i.e., connectivity of all the qubits
  @param[out] settings defines the configuration of the mapper, for more details visit MQT-QMAP official documentation.
  
  For example, given the following connectivity graph describing the relation of qubits in quantum arquictecture:

  \image html docs/_static/mqss-passes/connectivity_graph.png width=45%

  The MQT-QMAP tool re-maps the following two input circuts as follows:

  \image html docs/_static/mqss-passes/QuakeQMapPass-01.png width=50%
  \image html docs/_static/mqss-passes/QuakeQMapPass-02.png width=95%

 @return An `mlir::Pass` object containing the definition of the QuakeQMapPass. This `mlir::Pass` object has to be passed to an `mlir::PassManager` to take effect on any given MLIR module. After applying this pass, any given circuit is transformed to fulfill the physical constraints imposed by the selected quantum device `architecture` and `settings`.
 */
std::unique_ptr<mlir::Pass> createQuakeQMapPass(Architecture &architecture, const Configuration &settings);

/**
 * @brief QUAKE MLIR pass that decomposes two qubits CNot (XOp).
   @details This method constructs an `mlir::Pass` of the type CxToHCzHDecompositionPass. This decomposition pass operates on any two qubits XOp operation in a given QUAKE MLIR module and performs its replacement by a pattern composed of a Hadamard, Z and Hadamard operations, as follows.

  \image html docs/_static/mqss-passes/CxToHCzHDecompositionPass.png width=70%

 @return An `mlir::Pass` object containing the definition of the CxToHCzHDecompositionPass. This `mlir::Pass` object has to be passed to an `mlir::PassManager` to take effect on any given MLIR module.
 */
std::unique_ptr<mlir::Pass> createCxToHCzHDecompositionPass();

/**
 * @brief QUAKE MLIR pass that decomposes two qubits ZOp.
   @details This method constructs an `mlir::Pass` of the type CzToHCxHDecompositionPass. This decomposition pass operates on any two qubits ZOp operation in a given QUAKE MLIR module and performs its replacement by a pattern composed of a Hadamard, X and Hadamard operations, as follows.

  \image html docs/_static/mqss-passes/CzToHCxHDecompositionPass.png width=60%

 @return An `mlir::Pass` object containing the definition of the CzToHCxHDecompositionPass. This `mlir::Pass` object has to be passed to an `mlir::PassManager` to take effect on any given MLIR module.
 */
std::unique_ptr<mlir::Pass> createCzToHCxHDecompositionPass();

/**
 * @brief QUAKE MLIR pass that operates on the pattern composed of Cx and Rx.
   @details This method constructs an `mlir::Pass` of the type CommuteCNotRxPass. This pass operates on all the patterns composed of a Cx and Rx in a given QUAKE MLIR module and performs its replacement by a pattern composed of  Rx and Cx (commuting), as follows.

  \image html docs/_static/mqss-passes/CommuteCNotRxPass.png width=100%

 @return An `mlir::Pass` object containing the definition of the CommuteCNotRxPass. This `mlir::Pass` object has to be passed to an `mlir::PassManager` to take effect on any given MLIR module.
 */
std::unique_ptr<mlir::Pass> createCommuteCNotRxPass();

/**
 * @brief QUAKE MLIR pass that operates on the pattern composed of two-qubits Cx and a single-qubit Cx.
   @details This method constructs an `mlir::Pass` of the type CommuteCNotXPass. This pass operates on all the patterns composed of a two-qubits Cx and single-qubit Cx in a given QUAKE MLIR module and performs its replacement by a pattern composed of the single-qubit Cx and the two-qubits Cx (commuting), as follows.

  \image html docs/_static/mqss-passes/CommuteCNotXPass.png width=75%

 @return An `mlir::Pass` object containing the definition of the CommuteCNotXPass. This `mlir::Pass` object has to be passed to an `mlir::PassManager` to take effect on any given MLIR module.
 */
std::unique_ptr<mlir::Pass> createCommuteCNotXPass();

/**
 * @brief QUAKE MLIR pass that operates on the pattern composed of two-qubits Cx and a single-qubit Z.
   @details This method constructs an `mlir::Pass` of the type CommuteCNotZPass. This pass operates on all the patterns composed of a two-qubits Cx and single-qubit Z in a given QUAKE MLIR module and performs its replacement by a pattern composed of the single-qubit Z and the two-qubits Cx (commuting), as follows.

  Example 1:
  \image html docs/_static/mqss-passes/CommuteCNotZPass-01.png width=55%
  Example 2:
  \image html docs/_static/mqss-passes/CommuteCNotZPass.png width=100%

 @return An `mlir::Pass` object containing the definition of the CommuteCNotZPass. This `mlir::Pass` object has to be passed to an `mlir::PassManager` to take effect on any given MLIR module.
 */
std::unique_ptr<mlir::Pass> createCommuteCNotZPass();

/**
 * @brief QUAKE MLIR pass that operates on the pattern composed of Rx and a two-qubits CNot.
   @details This method constructs an `mlir::Pass` of the type CommuteRxCNotPass. This pass operates on all the patterns composed of a Rx and a two-qubits CNot in a given QUAKE MLIR module and performs its replacement by a pattern composed of  CNot and Rx (commuting), as follows.

  \image html docs/_static/mqss-passes/CommuteRxCNotPass.png width=100%

 @return An `mlir::Pass` object containing the definition of the CommuteRxCNotPass. This `mlir::Pass` object has to be passed to an `mlir::PassManager` to take effect on any given MLIR module.
 */
std::unique_ptr<mlir::Pass> createCommuteRxCNotPass();

/**
 * @brief QUAKE MLIR pass that operates on the pattern composed of X and a two-qubits CNot.
   @details This method constructs an `mlir::Pass` of the type CommuteXCNotPass. This pass operates on all the patterns composed of a single qubit X and a two-qubits CNot in a given QUAKE MLIR module and performs its replacement by a pattern composed of  CNot and X (commuting), as follows.

  \image html docs/_static/mqss-passes/CommuteXCNotPass.png width=75%

 @return An `mlir::Pass` object containing the definition of the CommuteXCNotPass. This `mlir::Pass` object has to be passed to an `mlir::PassManager` to take effect on any given MLIR module.
 */
std::unique_ptr<mlir::Pass> createCommuteXCNotPass();

/**
 * @brief QUAKE MLIR pass that operates on the pattern composed of Z and a two-qubits CNot.
   @details This method constructs an `mlir::Pass` of the type CommuteZCNotPass. This pass operates on all the patterns composed of a Z and a two-qubits CNot in a given QUAKE MLIR module and performs its replacement by a pattern composed of  CNot and Z (commuting), as follows.

  Example 1:
  \image html docs/_static/mqss-passes/CommuteZCNotPass-01.png width=55%
  Example 2:
  \image html docs/_static/mqss-passes/CommuteZCNotPass.png width=100%

 @return An `mlir::Pass` object containing the definition of the CommuteZCNotPass. This `mlir::Pass` object has to be passed to an `mlir::PassManager` to take effect on any given MLIR module.
 */
std::unique_ptr<mlir::Pass> createCommuteZCNotPass();

/**
 * @brief QUAKE MLIR pass that operates on the pattern composed of CNot and CNot.
   @details This method constructs an `mlir::Pass` of the type DoubleCnotCancellationPass. This pass operates on all the patterns composed of a CNot and CNot operating on the same control and target, in a given QUAKE MLIR module and removes it from the module, as follows.

  \image html docs/_static/mqss-passes/DoubleCnotCancellationPass.png width=100%

 @return An `mlir::Pass` object containing the definition of the DoubleCnotCancellationPass. This `mlir::Pass` object has to be passed to an `mlir::PassManager` to take effect on any given MLIR module.
 */
std::unique_ptr<mlir::Pass> createDoubleCnotCancellationPass();

/**
 * @brief QUAKE MLIR pass that operates on each CNot gate in a given quantum circuit.
   @details This method constructs an `mlir::Pass` of the type ReverseCNotPass. This pass operates on all two-qubit CNot gates and reverses the target and controls by introducing additional Hadamard gates, in a given QUAKE MLIR module, as follows.

  \image html docs/_static/mqss-passes/DoubleCnotCancellationPass.png width=100%

 @return An `mlir::Pass` object containing the definition of the ReverseCNotPass. This `mlir::Pass` object has to be passed to an `mlir::PassManager` to take effect on any given MLIR module.
 */
std::unique_ptr<mlir::Pass> createReverseCNotPass();

/**
 * @brief QUAKE MLIR pass that operates on each rotation Rx, Ry, and Rz gate in a given quantum circuit.
   @details This method constructs an `mlir::Pass` of the type NormalizeArgAnglePass. This pass operates on rotation Rx, Ry, and Rz gates an normalizes the angle, as follows.

  \image html docs/_static/mqss-passes/DoubleCnotCancellationPass.png width=100%

 @return An `mlir::Pass` object containing the definition of the NormalizeArgAnglePass. This `mlir::Pass` object has to be passed to an `mlir::PassManager` to take effect on any given MLIR module.
 */
std::unique_ptr<mlir::Pass> createNormalizeArgAnglePass();

/**
 * @brief QUAKE MLIR pass that operates on the pattern composed of Hadamard, X and Hadamard a replaces it by a Z gate.
   @details This method constructs an `mlir::Pass` of the type HXHToZPass. This pass operates on the pattern Hadamard, X and Hadamard, as follows.

  \image html docs/_static/mqss-passes/DoubleCnotCancellationPass.png width=100%

 @return An `mlir::Pass` object containing the definition of the HXHToZPass. This `mlir::Pass` object has to be passed to an `mlir::PassManager` to take effect on any given MLIR module.
 */
std::unique_ptr<mlir::Pass> createHXHToZPass();

/**
 * @brief QUAKE MLIR pass that operates on the pattern composed of Pauli single-qubit gates {X, Y, Z} and Hadamard a switches accordingly.
   @details This method constructs an `mlir::Pass` of the type PauliGateAndHadamardSwitchPass. This pass operates on the pattern {X,Y,Z} and Hadamard, as follows.

  \image html docs/_static/mqss-passes/DoubleCnotCancellationPass.png width=100%

 @return An `mlir::Pass` object containing the definition of the PauliGateAndHadamardSwitchPass. This `mlir::Pass` object has to be passed to an `mlir::PassManager` to take effect on any given MLIR module.
 */
std::unique_ptr<mlir::Pass> createPauliGateAndHadamardSwitchPass();

/**
 * @brief QUAKE MLIR pass that generates a tikz diagram to be built using LaTeX.
   @details This method constructs an `mlir::Pass` of the type QuakeToTikzPass. This pass generates a tizk diagram of a given input QUAKE MLIR module.
   @param[out] ostream A raw stream object that stores the tikz diagram that later can be built using LaTeX.
 @return An `mlir::Pass` object containing the definition of the QuakeToTikzPass. This `mlir::Pass` object has to be passed to an `mlir::PassManager` to take effect on any given MLIR module.
 */
std::unique_ptr<mlir::Pass> createQuakeToTikzPass(llvm::raw_string_ostream &ostream);

} // end namespace
#endif // PASSES_H
