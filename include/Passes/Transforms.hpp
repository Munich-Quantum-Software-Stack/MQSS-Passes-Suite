/* This code and any associated documentation is provided "as is"

Copyright 2024 Munich Quantum Software Stack Project

Licensed under the Apache License, Version 2.0 with LLVM Exceptions (the
"License"); you may not use this file except in compliance with the License.
You may obtain a copy of the License at

https://github.com/Munich-Quantum-Software-Stack/passes/blob/develop/LICENSE

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations under
the License.

SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
*************************************************************************
  author Martin Letras
  date   February 2025
  version 1.0
*************************************************************************/
/** @file
 * @brief
 * @details Header file that defines the signature for each QUAKE MLIR defined
 * into the Munich Quantum Software Stack (MQSS).
 *
 * @par
 * This header must be included to use the collection of passes that are part of
 * the MQSS.
 */

#ifndef TRANSFORMS_H
#define TRANSFORMS_H

#pragma once

#include "mlir/Pass/Pass.h"
#include "mlir/Pass/PassManager.h"
#include "mlir/Pass/PassRegistry.h"

#include "llvm/Support/raw_ostream.h"

#include <stdexcept>
// #include "qdmi.h"
#include "sc/heuristic/HeuristicMapper.hpp"

/**
 * @def CUDAQ_PREFIX_FUNCTION
 * @brief Macro defining the prefix of each quantum kernel generated by QUAKE
 * MLIR. This macro is used to identify QUAKE MLIR quantum kernels.
 */
#define CUDAQ_PREFIX_FUNCTION "__nvqpp__mlirgen__"

namespace mqss::opt {

/**
 * @brief QUAKE MLIR pass to perform the mapping of quantum circuits to
 superconducting devices using the MQT-QMAP.
   @details This method constructs an `mlir::Pass` of the type QuakeQMapPass.
 This pass operates on any QUAKE MLIR module and performs the mapping of any
 given quantum circuit to an specific quantum superconducting device.
  @param[out] architecture is the selected superconducting quantum device
 configuration, including important information for mapping, i.e., connectivity
 of all the qubits
  @param[out] settings defines the configuration of the mapper, for more details
 visit MQT-QMAP official documentation.

  For example, given the following connectivity graph describing the relation of
 qubits in quantum arquictecture:

  \image html docs/_static/mqss-passes/connectivity_graph.png width=45%

  The MQT-QMAP tool re-maps the following two input circuits as follows:

  \image html docs/_static/mqss-passes/QuakeQMapPass-01.png width=50%
  \image html docs/_static/mqss-passes/QuakeQMapPass-02.png width=95%

 @return An `mlir::Pass` object containing the definition of the QuakeQMapPass.
 This `mlir::Pass` object has to be passed to an `mlir::PassManager` to take
 effect on any given MLIR module. After applying this pass, any given circuit is
 transformed to fulfill the physical constraints imposed by the selected quantum
 device `architecture` and `settings`.
 */
std::unique_ptr<mlir::Pass> createQuakeQMapPass(Architecture &architecture,
                                                const Configuration &settings);

/**
 * @brief QUAKE MLIR pass that operates on the pattern composed of Cx and Rx.
   @details This method constructs an `mlir::Pass` of the type
 CommuteCNotRxPass. This pass operates on all the patterns composed of a Cx and
 Rx in a given QUAKE MLIR module and performs its replacement by a pattern
 composed of  Rx and Cx (commuting), as follows.

  \image html docs/_static/mqss-passes/CommuteCNotRxPass.png width=100%

 @return An `mlir::Pass` object containing the definition of the
 CommuteCNotRxPass. This `mlir::Pass` object has to be passed to an
 `mlir::PassManager` to take effect on any given MLIR module.
 */
std::unique_ptr<mlir::Pass> createCommuteCxRxPass();

/**
 * @brief QUAKE MLIR pass that operates on the pattern composed of two-qubits Cx
 and a single-qubit Cx.
   @details This method constructs an `mlir::Pass` of the type CommuteCNotXPass.
 This pass operates on all the patterns composed of a two-qubits Cx and
 single-qubit Cx in a given QUAKE MLIR module and performs its replacement by a
 pattern composed of the single-qubit Cx and the two-qubits Cx (commuting), as
 follows.

  \image html docs/_static/mqss-passes/CommuteCNotXPass.png width=75%

 @return An `mlir::Pass` object containing the definition of the
 CommuteCNotXPass. This `mlir::Pass` object has to be passed to an
 `mlir::PassManager` to take effect on any given MLIR module.
 */
std::unique_ptr<mlir::Pass> createCommuteCxXPass();

/**
 * @brief QUAKE MLIR pass that operates on the pattern composed of two-qubits Cx
 and a single-qubit Z.
   @details This method constructs an `mlir::Pass` of the type CommuteCNotZPass.
 This pass operates on all the patterns composed of a two-qubits Cx and
 single-qubit Z in a given QUAKE MLIR module and performs its replacement by a
 pattern composed of the single-qubit Z and the two-qubits Cx (commuting), as
 follows.

  Example 1:
  \image html docs/_static/mqss-passes/CommuteCNotZPass-01.png width=55%
  Example 2:
  \image html docs/_static/mqss-passes/CommuteCNotZPass.png width=100%

 @return An `mlir::Pass` object containing the definition of the
 CommuteCNotZPass. This `mlir::Pass` object has to be passed to an
 `mlir::PassManager` to take effect on any given MLIR module.
 */
std::unique_ptr<mlir::Pass> createCommuteCxZPass();

/**
 * @brief QUAKE MLIR pass that operates on the pattern composed of Rx and a
 two-qubits CNot.
   @details This method constructs an `mlir::Pass` of the type
 CommuteRxCNotPass. This pass operates on all the patterns composed of a Rx and
 a two-qubits CNot in a given QUAKE MLIR module and performs its replacement by
 a pattern composed of  CNot and Rx (commuting), as follows.

  \image html docs/_static/mqss-passes/CommuteRxCNotPass.png width=100%

 @return An `mlir::Pass` object containing the definition of the
 CommuteRxCNotPass. This `mlir::Pass` object has to be passed to an
 `mlir::PassManager` to take effect on any given MLIR module.
 */
std::unique_ptr<mlir::Pass> createCommuteRxCxPass();

/**
 * @brief QUAKE MLIR pass that operates on the pattern composed of X and a
 two-qubits CNot.
   @details This method constructs an `mlir::Pass` of the type CommuteXCNotPass.
 This pass operates on all the patterns composed of a single qubit X and a
 two-qubits CNot in a given QUAKE MLIR module and performs its replacement by a
 pattern composed of  CNot and X (commuting), as follows.

  \image html docs/_static/mqss-passes/CommuteXCNotPass.png width=75%

 @return An `mlir::Pass` object containing the definition of the
 CommuteXCNotPass. This `mlir::Pass` object has to be passed to an
 `mlir::PassManager` to take effect on any given MLIR module.
 */
std::unique_ptr<mlir::Pass> createCommuteXCxPass();

/**
 * @brief QUAKE MLIR pass that operates on the pattern composed of Z and a
 two-qubits CNot.
   @details This method constructs an `mlir::Pass` of the type CommuteZCNotPass.
 This pass operates on all the patterns composed of a Z and a two-qubits CNot in
 a given QUAKE MLIR module and performs its replacement by a pattern composed of
 CNot and Z (commuting), as follows.

  Example 1:
  \image html docs/_static/mqss-passes/CommuteZCNotPass-01.png width=55%
  Example 2:
  \image html docs/_static/mqss-passes/CommuteZCNotPass.png width=100%

 @return An `mlir::Pass` object containing the definition of the
 CommuteZCNotPass. This `mlir::Pass` object has to be passed to an
 `mlir::PassManager` to take effect on any given MLIR module.
 */
std::unique_ptr<mlir::Pass> createCommuteZCxPass();

/**
 * @brief QUAKE MLIR pass that operates on the pattern composed of CNot and
 CNot.
   @details This method constructs an `mlir::Pass` of the type
 DoubleCnotCancellationPass. This pass operates on all the patterns composed of
 a CNot and CNot operating on the same control and target, in a given QUAKE MLIR
 module and removes it from the module, as follows.

  \image html docs/_static/mqss-passes/DoubleCnotCancellationPass.png width=100%

 @return An `mlir::Pass` object containing the definition of the
 DoubleCnotCancellationPass. This `mlir::Pass` object has to be passed to an
 `mlir::PassManager` to take effect on any given MLIR module.
 */
std::unique_ptr<mlir::Pass> createCancellationDoubleCxPass();

/**
 * @brief QUAKE MLIR pass that operates on each rotation Rx, Ry, and Rz gate in
 a given quantum circuit.
   @details This method constructs an `mlir::Pass` of the type
 NormalizeArgAnglePass. This pass operates on rotation Rx, Ry, and Rz gates an
 normalizes the angle, as follows.

  \image html docs/_static/mqss-passes/NormalizeArgAnglePass.png width=100%

 @return An `mlir::Pass` object containing the definition of the
 NormalizeArgAnglePass. This `mlir::Pass` object has to be passed to an
 `mlir::PassManager` to take effect on any given MLIR module.
 */
std::unique_ptr<mlir::Pass> createNormalizeArgAnglePass();

/**
 * @brief QUAKE MLIR pass that operates on each rotation Rx, Ry, and Rz gate in
 a given quantum circuit and removes each rotation that results in a null
 rotation.
   @details This method constructs an `mlir::Pass` of the type
 NullRotationCancellationPass. This pass operates on rotation Rx, Ry, and Rz
 gates an removes the rotation if the angle results in a null rotation, as
 follows.

  \image html docs/_static/mqss-passes/NullRotationCancellationPass.png
 width=100%

 @return An `mlir::Pass` object containing the definition of the
 NullRotationCancellationPass. This `mlir::Pass` object has to be passed to an
 `mlir::PassManager` to take effect on any given MLIR module.
 */
std::unique_ptr<mlir::Pass> createCancellationNullRotationPass();

/**
 * @brief QUAKE MLIR pass that operates on the pattern composed of Hadamard, X
 and Hadamard a replaces it by a Z gate.
   @details This method constructs an `mlir::Pass` of the type HXHToZPass. This
 pass operates on the pattern Hadamard, X and Hadamard, as follows.

  \image html docs/_static/mqss-passes/HXHToZPass.png width=80%

 @return An `mlir::Pass` object containing the definition of the HXHToZPass.
 This `mlir::Pass` object has to be passed to an `mlir::PassManager` to take
 effect on any given MLIR module.
 */
std::unique_ptr<mlir::Pass> createHXHToZPass();

/**
 * @brief QUAKE MLIR pass that operates on the pattern composed of Hadamard, Z
 and Hadamard a replaces it by a X gate.
   @details This method constructs an `mlir::Pass` of the type HZHToXPass. This
 pass operates on the pattern Hadamard, Z and Hadamard, as follows.

  \image html docs/_static/mqss-passes/HZHToXPass.png width=80%

 @return An `mlir::Pass` object containing the definition of the HZHToXPass.
 This `mlir::Pass` object has to be passed to an `mlir::PassManager` to take
 effect on any given MLIR module.
 */
std::unique_ptr<mlir::Pass> createHZHToXPass();

/**
 * @brief QUAKE MLIR pass that operates on the pattern composed of Pauli
 single-qubit gates {X, Y, Z} and Hadamard a switches accordingly.
   @details This method constructs an `mlir::Pass` of the type
 PauliGateAndHadamardSwitchPass. This pass operates on the pattern {X,Y,Z} and
 Hadamard, as follows.

  Example 1:
  \image html docs/_static/mqss-passes/XGateAndHadamardSwitchPass.png width=70%

  Example 2:
  \image html docs/_static/mqss-passes/XGateAndHadamardSwitchPass.png width=70%

  Example 3:
  \image html docs/_static/mqss-passes/XGateAndHadamardSwitchPass.png width=70%

 @return An `mlir::Pass` object containing the definition of the
 PauliGateAndHadamardSwitchPass. This `mlir::Pass` object has to be passed to an
 `mlir::PassManager` to take effect on any given MLIR module.
 */
std::unique_ptr<mlir::Pass> createSwitchPauliHPass();

/**
 * @brief QUAKE MLIR pass that operates on the pattern composed of single-qubit
 gate X and Hadamard a switches to Z gate and Hadamard.
   @details This method constructs an `mlir::Pass` of the type
 XGateAndHadamardSwitchPass. This pass operates on the pattern X and Hadamard,
 as follows.

  \image html docs/_static/mqss-passes/XGateAndHadamardSwitchPass.png width=70%

 @return An `mlir::Pass` object containing the definition of the
 XGateAndHadamardSwitchPass. This `mlir::Pass` object has to be passed to an
 `mlir::PassManager` to take effect on any given MLIR module.
 */
std::unique_ptr<mlir::Pass> createSwitchXHPass();

/**
 * @brief QUAKE MLIR pass that operates on the pattern composed of single-qubit
 gate Y and Hadamard a switches to Y and Hadamard.
   @details This method constructs an `mlir::Pass` of the type
 YGateAndHadamardSwitchPass. This pass operates on the pattern Y and Hadamard,
 as follows.

  \image html docs/_static/mqss-passes/YGateAndHadamardSwitchPass.png width=70%

 @return An `mlir::Pass` object containing the definition of the
 YGateAndHadamardSwitchPass. This `mlir::Pass` object has to be passed to an
 `mlir::PassManager` to take effect on any given MLIR module.
 */
std::unique_ptr<mlir::Pass> createSwitchYHPass();

/**
 * @brief QUAKE MLIR pass that operates on the pattern composed of single-qubit
 gate Z and Hadamard to X and Hadamard.
   @details This method constructs an `mlir::Pass` of the type
 ZGateAndHadamardSwitchPass. This pass operates on the pattern Z and Hadamard,
 as follows.

  \image html docs/_static/mqss-passes/ZGateAndHadamardSwitchPass.png width=70%

 @return An `mlir::Pass` object containing the definition of the
 ZGateAndHadamardSwitchPass. This `mlir::Pass` object has to be passed to an
 `mlir::PassManager` to take effect on any given MLIR module.
 */
std::unique_ptr<mlir::Pass> createSwitchZHPass();

/**
 * @brief QUAKE MLIR pass that operates on the pattern composed of Hadamard and
 single-qubit gate X a switches to Z gate and Hadamard.
   @details This method constructs an `mlir::Pass` of the type
 HadamardAndXGateSwitchPass. This pass operates on the pattern Hadamard and X,
 as follows.

  \image html docs/_static/mqss-passes/HadamardAndXGateSwitchPass.png width=70%

 @return An `mlir::Pass` object containing the definition of the
 HadamardAndXGateSwitchPass. This `mlir::Pass` object has to be passed to an
 `mlir::PassManager` to take effect on any given MLIR module.
 */
std::unique_ptr<mlir::Pass> createSwitchHXPass();

/**
 * @brief QUAKE MLIR pass that operates on the pattern composed of Hadamard and
 single-qubit gate Y a switches to Y gate and Hadamard.
   @details This method constructs an `mlir::Pass` of the type
 HadamardAndYGateSwitchPass. This pass operates on the pattern Hadamard and Y,
 as follows.

  \image html docs/_static/mqss-passes/HadamardAndYGateSwitchPass.png width=70%

 @return An `mlir::Pass` object containing the definition of the
 HadamardAndYGateSwitchPass. This `mlir::Pass` object has to be passed to an
 `mlir::PassManager` to take effect on any given MLIR module.
 */
std::unique_ptr<mlir::Pass> createSwitchHYPass();

/**
 * @brief QUAKE MLIR pass that operates on the pattern composed of Hadamard and
 single-qubit gate Z a switches to X gate and Hadamard.
   @details This method constructs an `mlir::Pass` of the type
 HadamardAndZGateSwitchPass. This pass operates on the pattern Hadamard and Z,
 as follows.

  \image html docs/_static/mqss-passes/HadamardAndZGateSwitchPass.png width=70%

 @return An `mlir::Pass` object containing the definition of the
 HadamardAndZGateSwitchPass. This `mlir::Pass` object has to be passed to an
 `mlir::PassManager` to take effect on any given MLIR module.
 */
std::unique_ptr<mlir::Pass> createSwitchHZPass();
} // namespace mqss::opt
#endif // TRANSFORMS_H

// declarative passes
#define GEN_PASS_DECL
#define GEN_PASS_REGISTRATION
#include "Passes/Transforms.h.inc"
