/* This code and any associated documentation is provided "as is"

Copyright 2024 Munich Quantum Software Stack Project

Licensed under the Apache License, Version 2.0 with LLVM Exceptions (the
"License"); you may not use this file except in compliance with the License.
You may obtain a copy of the License at

https://github.com/Munich-Quantum-Software-Stack/passes/blob/develop/LICENSE

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations under
the License.

SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
*************************************************************************
  author Martin Letras
  date   February 2025
  version 1.0
*************************************************************************/
/** @file
 * @brief
 * @details Header file that defines the signature for each MLIR/Quake defined
 * into the Munich Quantum Software Stack (MQSS).
 *
 * @par
 * This header must be included to use the collection of code generation passes
 * that are part of the MQSS.
 */

#pragma once

#include "mlir/Pass/Pass.h"
#include "mlir/Pass/PassManager.h"
#include "mlir/Pass/PassRegistry.h"

#include "llvm/Support/raw_ostream.h"

#include <stdexcept>

/**
 * @def CUDAQ_PREFIX_FUNCTION
 * @brief Macro defining the prefix of each quantum kernel generated by
 * MLIR/Quake. This macro is used to identify MLIR/Quake quantum kernels.
 */
#define CUDAQ_PREFIX_FUNCTION "__nvqpp__mlirgen__"

namespace mqss::opt {

/**
 * @brief MLIR/Quake pass that generates a tikz diagram to be built using LaTeX.
   @details This method constructs an `mlir::Pass` of the type QuakeToTikzPass.
 This pass generates a tizk diagram of a given input MLIR/Quake module.
   @param[out] ostream A raw stream object that stores the tikz diagram that
 later can be built using LaTeX.
 @return An `mlir::Pass` object containing the definition of the
 QuakeToTikzPass. This `mlir::Pass` object has to be passed to an
 `mlir::PassManager` to take effect on any given MLIR module.
 */
std::unique_ptr<mlir::Pass>
createQuakeToTikzPass(llvm::raw_string_ostream &ostream);

/**
 * @brief Pass that generates a quake module form a given QASM3 circuit.
   @details This method constructs an `mlir::Pass` of the type QASM3ToQuakePass.
 This pass generates a MLIR/Quake module of a given input QASM3 circuit.
   @param[in] measureAllQubits (optional), if this arguments is set **true**,
 the output QASM circuit will measure all the qubits using a single instruction.
   @param[out] qasmStream A raw stream object that stores the QASM circuit.
 @return An `mlir::Pass` object containing the definition of the
 QASM3ToQuakePass. This `mlir::Pass` object has to be passed to an
 `mlir::PassManager` to take effect on any given MLIR module.
 */
std::unique_ptr<mlir::Pass>
createQASM3ToQuakePass(std::istringstream &qasmStream,
                       bool measureAllQubits = false);
} // namespace mqss::opt
